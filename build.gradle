buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
        maven { url = 'https://maven.outlands.top/releases' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '6.99.+', changing: true
        //classpath "org.spongepowered:mixingradle:0.7-SNAPSHOT"
    }
}

apply plugin: 'scala'
apply plugin: 'net.minecraftforge.gradle'

file "build.properties" withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

if (project.hasProperty('forgeOverride')) {
    config.forge.version = forgeOverride
}

if (project.hasProperty('buildnum')) {
    ext.simpleVersion = "${config.bdlib.version}.${project.buildnum}"
} else {
    ext.simpleVersion = "${config.bdlib.version}-DEV"
}

version = simpleVersion + '-mc' + config.minecraft.version

group = "net.bdew"
archivesBaseName = "bdlib"

minecraft {
    mappings channel: "stable", version: "39-1.12"

    //accessTransformer = file('src/main/resources/fmp_at.cfg')

    runs {
        client {
            workingDirectory project.file('run/client')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

        }

        server {
            workingDirectory project.file('run/server')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }

}

repositories {
    mavenCentral()
    maven {
        name 'Cleanroom Maven'
        url 'https://maven.cleanroommc.com/'
    }
    maven {
        url "https://repo.cleanroommc.com/snapshots"
    }
    maven {
        url "https://maven.outlands.top/releases/"
    }
    maven {
        url "https://jitpack.io/"
    }
}

ext {
    lwjglLibraries = [
            [
                    'lwjgl3-glfw', 'lwjgl3-jemalloc', 'lwjgl3-openal',
                    'lwjgl3-opengl', 'lwjgl3-stb', 'lwjgl3-tinyfd', 'lwjgl3'
            ],

            [
                    'natives-linux-arm64', 'natives-linux-arm32', 'natives-linux',
                    'natives-macos-arm64', 'natives-macos',
                    'natives-windows-arm64', 'natives-windows-x86', 'natives-windows'
            ]
    ]
    lwjglArch = 'natives-linux'
}

dependencies {
    minecraft ("com.cleanroommc:cleanroom:15.24.0.3011")
    lwjglLibraries[0].each {
        lwjglLibraries[1].each { arch ->
            runtimeOnly "org.lwjgl3:$it:3.3.2-22-CLEANROOM:$lwjglArch"
        }
    }

}

import org.apache.tools.ant.filters.ReplaceTokens


sourceSets {
    main {
        scala {
            srcDir 'src'
        }
        resources {
            srcDir 'resources'
        }
    }
}

processResources {

}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    archiveClassifier = "dev"
}

task sourceJarReal(type: Jar) {
    // FG has a task named sourceJar that seems to be borked
    archiveClassifier = "sources"
}
/*
afterEvaluate { project ->
    // Use sources after replacements
    tasks.getByPath(":sourceJarReal").from(tasks.getByPath(":sourceMainScala").outputs.files)
}*/

artifacts {
    archives sourceJarReal
    archives deobfJar
}
